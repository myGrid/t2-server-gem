var search_data = {"index":{"searchIndex":["t2server","accessforbiddenerror","administrator","adminresource","attributenotfounderror","authorizationerror","clientauthsslconnectionparameters","connectionerror","connectionparameters","connectionredirecterror","customcasslconnectionparameters","defaultconnectionparameters","httpbasic","httpcredentials","inputport","insecuresslconnectionparameters","interaction","feed","notification","reader","internalhttperror","outputport","port","portvalue","run","status","runnotfounderror","runstateerror","ssl3connectionparameters","server","serveratcapacityerror","t2servererror","unexpectedserverresponse","util","version","[]()","[]()","[]=()","add_keypair_credential()","add_password_credential()","add_trust()","administrator()","append_to_uri_path()","baclava?()","baclava_input=()","baclava_input?()","baclava_output()","baclava_output?()","create()","create_run()","create_time()","credential()","credentials()","delete()","delete_all_credentials()","delete_all_runs()","delete_all_trusts()","delete_credential()","delete_trust()","deleted?()","empty?()","empty?()","error?()","error?()","error?()","exitcode()","expiry()","expiry=()","file=()","file?()","finish_time()","finished?()","get_path_leaf_from_uri()","grant_permission()","has_interaction_support?()","has_reply?()","initialized?()","input_port()","input_ports()","inspect()","inspect()","is_notification?()","is_reply?()","mkdir()","name()","name=()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","notifications()","output_port()","output_ports()","owner()","owner?()","permission()","permissions()","reference()","remote_file=()","remote_file?()","replace_uri_path()","request_baclava_output()","revoke_permission()","run()","run_limit()","running?()","runs()","set?()","size()","start()","start_time()","status()","stderr()","stdout()","stream_value()","stream_value()","strip_path_slashes()","strip_uri_credentials()","to_s()","total_size()","trusts()","type()","upload_data()","upload_file()","uri()","value()","value()","value()","value=()","version()","version_components()","wait()","workflow()","writable?()","write_value_to_file()","write_value_to_file()","zip()","zip_output()","changes","licence","readme"],"longSearchIndex":["t2server","t2server::accessforbiddenerror","t2server::administrator","t2server::administrator::adminresource","t2server::attributenotfounderror","t2server::authorizationerror","t2server::clientauthsslconnectionparameters","t2server::connectionerror","t2server::connectionparameters","t2server::connectionredirecterror","t2server::customcasslconnectionparameters","t2server::defaultconnectionparameters","t2server::httpbasic","t2server::httpcredentials","t2server::inputport","t2server::insecuresslconnectionparameters","t2server::interaction","t2server::interaction::feed","t2server::interaction::notification","t2server::interaction::reader","t2server::internalhttperror","t2server::outputport","t2server::port","t2server::portvalue","t2server::run","t2server::run::status","t2server::runnotfounderror","t2server::runstateerror","t2server::ssl3connectionparameters","t2server::server","t2server::serveratcapacityerror","t2server::t2servererror","t2server::unexpectedserverresponse","t2server::util","t2server::version","t2server::administrator#[]()","t2server::outputport#[]()","t2server::connectionparameters#[]=()","t2server::run#add_keypair_credential()","t2server::run#add_password_credential()","t2server::run#add_trust()","t2server::server#administrator()","t2server::util::append_to_uri_path()","t2server::inputport#baclava?()","t2server::run#baclava_input=()","t2server::run#baclava_input?()","t2server::run#baclava_output()","t2server::run#baclava_output?()","t2server::run::create()","t2server::server#create_run()","t2server::run#create_time()","t2server::run#credential()","t2server::run#credentials()","t2server::run#delete()","t2server::run#delete_all_credentials()","t2server::server#delete_all_runs()","t2server::run#delete_all_trusts()","t2server::run#delete_credential()","t2server::run#delete_trust()","t2server::run#deleted?()","t2server::outputport#empty?()","t2server::portvalue#empty?()","t2server::outputport#error?()","t2server::portvalue#error?()","t2server::run#error?()","t2server::run#exitcode()","t2server::run#expiry()","t2server::run#expiry=()","t2server::inputport#file=()","t2server::inputport#file?()","t2server::run#finish_time()","t2server::run#finished?()","t2server::util::get_path_leaf_from_uri()","t2server::run#grant_permission()","t2server::server#has_interaction_support?()","t2server::interaction::notification#has_reply?()","t2server::run#initialized?()","t2server::run#input_port()","t2server::run#input_ports()","t2server::httpcredentials#inspect()","t2server::portvalue#inspect()","t2server::interaction::notification#is_notification?()","t2server::interaction::notification#is_reply?()","t2server::run#mkdir()","t2server::run#name()","t2server::run#name=()","t2server::accessforbiddenerror::new()","t2server::attributenotfounderror::new()","t2server::authorizationerror::new()","t2server::clientauthsslconnectionparameters::new()","t2server::connectionerror::new()","t2server::connectionparameters::new()","t2server::connectionredirecterror::new()","t2server::customcasslconnectionparameters::new()","t2server::defaultconnectionparameters::new()","t2server::httpbasic::new()","t2server::insecuresslconnectionparameters::new()","t2server::runnotfounderror::new()","t2server::runstateerror::new()","t2server::ssl3connectionparameters::new()","t2server::server::new()","t2server::serveratcapacityerror::new()","t2server::unexpectedserverresponse::new()","t2server::run#notifications()","t2server::run#output_port()","t2server::run#output_ports()","t2server::run#owner()","t2server::run#owner?()","t2server::run#permission()","t2server::run#permissions()","t2server::outputport#reference()","t2server::inputport#remote_file=()","t2server::inputport#remote_file?()","t2server::util::replace_uri_path()","t2server::run#request_baclava_output()","t2server::run#revoke_permission()","t2server::server#run()","t2server::server#run_limit()","t2server::run#running?()","t2server::server#runs()","t2server::inputport#set?()","t2server::outputport#size()","t2server::run#start()","t2server::run#start_time()","t2server::run#status()","t2server::run#stderr()","t2server::run#stdout()","t2server::outputport#stream_value()","t2server::portvalue#stream_value()","t2server::util::strip_path_slashes()","t2server::util::strip_uri_credentials()","t2server::httpcredentials#to_s()","t2server::outputport#total_size()","t2server::run#trusts()","t2server::outputport#type()","t2server::run#upload_data()","t2server::run#upload_file()","t2server::server#uri()","t2server::administrator::adminresource#value()","t2server::outputport#value()","t2server::portvalue#value()","t2server::inputport#value=()","t2server::server#version()","t2server::server#version_components()","t2server::run#wait()","t2server::run#workflow()","t2server::administrator::adminresource#writable?()","t2server::outputport#write_value_to_file()","t2server::portvalue#write_value_to_file()","t2server::outputport#zip()","t2server::run#zip_output()","","",""],"info":[["T2Server","","T2Server.html","","<p>This is a Ruby library to interface with the Taverna 2 Server REST API.\n<p>There are two API entry points: …\n"],["T2Server::AccessForbiddenError","","T2Server/AccessForbiddenError.html","","<p>Access to the entity (run or attribute) is denied. The credentials supplied\nare not sufficient or the …\n"],["T2Server::Administrator","","T2Server/Administrator.html","","<p>This call provides access to the administrative interface of a Taverna\nServer instance.\n<p>To get an instance …\n"],["T2Server::Administrator::AdminResource","","T2Server/Administrator/AdminResource.html","","<p>This class represents a resource in the Taverna Server administrative\ninterface. A resource can be read …\n"],["T2Server::AttributeNotFoundError","","T2Server/AttributeNotFoundError.html","","<p>Indicates that the attribute that the user is trying to read/change does\nnot exist. The attribute could …\n"],["T2Server::AuthorizationError","","T2Server/AuthorizationError.html","","<p>Access to the server is denied to this username\n"],["T2Server::ClientAuthSSLConnectionParameters","","T2Server/ClientAuthSSLConnectionParameters.html","","<p>Connection parameters that simplify setting up client authentication to a\nserver over SSL.\n"],["T2Server::ConnectionError","","T2Server/ConnectionError.html","","<p>Raised when there is an error with the connection to the server in some\nway. This could be due to the …\n"],["T2Server::ConnectionParameters","","T2Server/ConnectionParameters.html","","<p>This is the base class for holding parameters for network connections. It\ndelegates most work to the …\n"],["T2Server::ConnectionRedirectError","","T2Server/ConnectionRedirectError.html","","<p>Raised if the server wishes to redirect the connection. This typically\nhappens if a client tries to connect …\n"],["T2Server::CustomCASSLConnectionParameters","","T2Server/CustomCASSLConnectionParameters.html","","<p>Connection parameters that simplify setting up verification of servers with\n“self-signed” or …\n"],["T2Server::DefaultConnectionParameters","","T2Server/DefaultConnectionParameters.html","","<p>Connection parameters with sensible defaults set for standard connections.\nIf the connection is over …\n"],["T2Server::HttpBasic","","T2Server/HttpBasic.html","","<p>A class representing HTTP Basic credentials. Use this class to authenticate\noperations on a Taverna  …\n"],["T2Server::HttpCredentials","","T2Server/HttpCredentials.html","","<p>This class serves as a base class for concrete HTTP credential systems.\n<p>Instances of this class cannot …\n"],["T2Server::InputPort","","T2Server/InputPort.html","","<p>Represents an input to a workflow.\n"],["T2Server::InsecureSSLConnectionParameters","","T2Server/InsecureSSLConnectionParameters.html","","<p>Connection parameters that specifically turn off peer verification when\nusing SSL.\n"],["T2Server::Interaction","","T2Server/Interaction.html","","<p>The Interaction module provides access to Taverna workflow notifications as\nsupplied by the Interaction …\n"],["T2Server::Interaction::Feed","","T2Server/Interaction/Feed.html","",""],["T2Server::Interaction::Notification","","T2Server/Interaction/Notification.html","","<p>This class represents a Taverna notification.\n"],["T2Server::Interaction::Reader","","T2Server/Interaction/Reader.html","",""],["T2Server::InternalHTTPError","","T2Server/InternalHTTPError.html","",""],["T2Server::OutputPort","","T2Server/OutputPort.html","","<p>Represents an output port of a workflow.\n"],["T2Server::Port","","T2Server/Port.html","","<p>Base class of InputPort and OutputPort\n"],["T2Server::PortValue","","T2Server/PortValue.html","","<p>A class to represent an output port data value.\n"],["T2Server::Run","","T2Server/Run.html","","<p>An interface for easily running jobs on a Taverna 2 Server with minimal\nsetup and configuration required. …\n"],["T2Server::Run::Status","","T2Server/Run/Status.html","",""],["T2Server::RunNotFoundError","","T2Server/RunNotFoundError.html","","<p>Raised when the run that is being operated on cannot be found. If the\nexpectation is that the run exists …\n"],["T2Server::RunStateError","","T2Server/RunStateError.html","","<p>Raised if an operation is performed on a run when it is in the wrong state.\nTrying to start a run if …\n"],["T2Server::SSL3ConnectionParameters","","T2Server/SSL3ConnectionParameters.html","","<p>Connection parameters that specify the use of SSL version 3.\n"],["T2Server::Server","","T2Server/Server.html","","<p>An interface for directly communicating with one or more Taverna 2 Server\ninstances.\n"],["T2Server::ServerAtCapacityError","","T2Server/ServerAtCapacityError.html","","<p>The server is at capacity and cannot accept anymore runs at this time.\n"],["T2Server::T2ServerError","","T2Server/T2ServerError.html","","<p>This is a superclass for all T2Server exceptions. It is provided as a\nuseful catch-all for all the internally …\n"],["T2Server::UnexpectedServerResponse","","T2Server/UnexpectedServerResponse.html","","<p>Raised when there is an unexpected response from the server. This does not\nnecessarily indicate a problem …\n"],["T2Server::Util","","T2Server/Util.html","","<p>This module contains various utility methods that the library uses\ninternally.\n"],["T2Server::Version","","T2Server/Version.html","","<p>Library version information.\n"],["[]","T2Server::Administrator","T2Server/Administrator.html#method-i-5B-5D","(name)","<p>Return the named AdminResource.\n"],["[]","T2Server::OutputPort","T2Server/OutputPort.html#method-i-5B-5D","(i)","<p>This call provides access to the underlying structure of the OutputPort. It\ncan only be used for ports …\n"],["[]=","T2Server::ConnectionParameters","T2Server/ConnectionParameters.html#method-i-5B-5D-3D","(param, value)","<p>Set a connection parameter. See the list of allowed parameters in the class\ndescription.\n"],["add_keypair_credential","T2Server::Run","T2Server/Run.html#method-i-add_keypair_credential","(uri, filename, password, name = \"Imported Certificate\", type = :pkcs12)","<p>Provide a client certificate credential for the secure service at the\nspecified URI. You will need to …\n"],["add_password_credential","T2Server::Run","T2Server/Run.html#method-i-add_password_credential","(uri, username, password)","<p>Provide a username and password credential for the secure service at the\nspecified URI. The URI of the …\n"],["add_trust","T2Server::Run","T2Server/Run.html#method-i-add_trust","(filename, type = :x509)","<p>Add a trusted identity (server public key) to verify peers when using https\nconnections to Web Services …\n"],["administrator","T2Server::Server","T2Server/Server.html#method-i-administrator","(credentials = nil)","<p>Return an instance of the Taverna Server administrator interface. This\nmethod will <em>yield</em> the newly created …\n"],["append_to_uri_path","T2Server::Util","T2Server/Util.html#method-c-append_to_uri_path","(uri, path)","<p>Appends a path to the end of the path of the given URI.\n"],["baclava?","T2Server::InputPort","T2Server/InputPort.html#method-i-baclava-3F","()","<p>Has this port been set via a baclava document?\n"],["baclava_input=","T2Server::Run","T2Server/Run.html#method-i-baclava_input-3D","(filename)","<p>Use a baclava file for the workflow inputs.\n"],["baclava_input?","T2Server::Run","T2Server/Run.html#method-i-baclava_input-3F","()","<p>Have the inputs to this run been set by a baclava document?\n"],["baclava_output","T2Server::Run","T2Server/Run.html#method-i-baclava_output","(param = nil, &block)","<p>Get the outputs of this run in baclava format. This can only be done if the\noutput has been requested …\n"],["baclava_output?","T2Server::Run","T2Server/Run.html#method-i-baclava_output-3F","()","<p>Has this run been set to return results in baclava format?\n"],["create","T2Server::Run","T2Server/Run.html#method-c-create","(server, workflow, *rest)","<p>Create a new run in the :initialized state. The run will be created on the\nserver with address supplied …\n"],["create_run","T2Server::Server","T2Server/Server.html#method-i-create_run","(workflow, credentials = nil)","<p>Create a run on this server using the specified <em>workflow</em>. This\nmethod will <em>yield</em> the newly created Run …\n"],["create_time","T2Server::Run","T2Server/Run.html#method-i-create_time","()","<p>Get the creation time of this run as an instance of class Time.\n"],["credential","T2Server::Run","T2Server/Run.html#method-i-credential","(uri)","<p>Return the URI of the credential set for the supplied service, if any. Only\nthe owner of a run may query …\n"],["credentials","T2Server::Run","T2Server/Run.html#method-i-credentials","()","<p>Return a hash (service_uri =&gt; credential_uri) of all the credentials\nprovided for this run. Only the …\n"],["delete","T2Server::Run","T2Server/Run.html#method-i-delete","()","<p>Delete this run from the server.\n"],["delete_all_credentials","T2Server::Run","T2Server/Run.html#method-i-delete_all_credentials","()","<p>Delete all credentials associated with this workflow run. Only the owner of\na run may delete its credentials. …\n"],["delete_all_runs","T2Server::Server","T2Server/Server.html#method-i-delete_all_runs","(credentials = nil)","<p>Delete all runs on this server, discarding all of their state. Note that\nonly those runs that the provided …\n"],["delete_all_trusts","T2Server::Run","T2Server/Run.html#method-i-delete_all_trusts","()","<p>Delete all trusted identities associated with this workflow run. Only the\nowner of a run may delete its …\n"],["delete_credential","T2Server::Run","T2Server/Run.html#method-i-delete_credential","(uri)","<p>Delete the credential that has been provided for the specified service.\nOnly the owner of a run may delete …\n"],["delete_trust","T2Server::Run","T2Server/Run.html#method-i-delete_trust","(uri)","<p>Delete the trust with the provided URI. Only the owner of a run may delete\nits trusts. <code>nil</code> is returned …\n"],["deleted?","T2Server::Run","T2Server/Run.html#method-i-deleted-3F","()","<p>Has this run been deleted from the server?\n"],["empty?","T2Server::OutputPort","T2Server/OutputPort.html#method-i-empty-3F","()","<p>Is this output port empty?\n<p>Note that if the output port holds a list then it is not considered empty,\n…\n"],["empty?","T2Server::PortValue","T2Server/PortValue.html#method-i-empty-3F","()","<p>Is this port value empty?\n"],["error?","T2Server::OutputPort","T2Server/OutputPort.html#method-i-error-3F","()","<p>Is there an error associated with this output port?\n"],["error?","T2Server::PortValue","T2Server/PortValue.html#method-i-error-3F","()","<p>Does this port represent an error?\n"],["error?","T2Server::Run","T2Server/Run.html#method-i-error-3F","()","<p>Are there errors in this run’s outputs? Returns false if the run is not\nfinished yet.\n"],["exitcode","T2Server::Run","T2Server/Run.html#method-i-exitcode","()","<p>Get the return code of the run. Zero indicates success.\n"],["expiry","T2Server::Run","T2Server/Run.html#method-i-expiry","()","<p>Return the expiry time of this run as an instance of class Time.\n"],["expiry=","T2Server::Run","T2Server/Run.html#method-i-expiry-3D","(time)","<p>Set the expiry time of this run to <em>time</em>. <em>time</em> should\neither be a Time object or something that the Time …\n"],["file=","T2Server::InputPort","T2Server/InputPort.html#method-i-file-3D","(filename)","<p>Set the file to use for this port’s data. The file will be uploaded to the\nserver before the run starts. …\n"],["file?","T2Server::InputPort","T2Server/InputPort.html#method-i-file-3F","()","<p>Is this port’s data being supplied by a file? The file could be local or\nremote (already on the server) …\n"],["finish_time","T2Server::Run","T2Server/Run.html#method-i-finish_time","()","<p>Get the finish time of this run as an instance of class Time.\n"],["finished?","T2Server::Run","T2Server/Run.html#method-i-finished-3F","()","<p>Is this run in the :finished state?\n"],["get_path_leaf_from_uri","T2Server::Util","T2Server/Util.html#method-c-get_path_leaf_from_uri","(uri)","<p>Get the final component from the path of a URI. This method returns the\nempty string (not <em>nil</em> ) if the …\n"],["grant_permission","T2Server::Run","T2Server/Run.html#method-i-grant_permission","(username, permission)","<p>Grant the user the stated permission. A permission can be one of\n<code>:none</code>, <code>:read</code>, <code>:update</code> or\n<code>:destroy</code>.  …\n"],["has_interaction_support?","T2Server::Server","T2Server/Server.html#method-i-has_interaction_support-3F","()","<p>Does this server support interactions and provide a feed for them?\n"],["has_reply?","T2Server::Interaction::Notification","T2Server/Interaction/Notification.html#method-i-has_reply-3F","()","<p>Does this notification have a reply? This only makes sense for\nnotifications that are not replies or …\n"],["initialized?","T2Server::Run","T2Server/Run.html#method-i-initialized-3F","()","<p>Is this run in the :initialized state?\n"],["input_port","T2Server::Run","T2Server/Run.html#method-i-input_port","(port)","<p>Get <em>port</em>.\n"],["input_ports","T2Server::Run","T2Server/Run.html#method-i-input_ports","()","<p>Return a hash (name, port) of all the input ports this run expects.\n"],["inspect","T2Server::HttpCredentials","T2Server/HttpCredentials.html#method-i-inspect","()","<p>Override the Kernel#inspect method so that the password is not exposed when\nit is called.\n"],["inspect","T2Server::PortValue","T2Server/PortValue.html#method-i-inspect","()","<p>Return a printable representation of this port value for debugging\npurposes.\n"],["is_notification?","T2Server::Interaction::Notification","T2Server/Interaction/Notification.html#method-i-is_notification-3F","()","<p>Is this notification a pure notification only? There is no user response to\na pure notification, it is …\n"],["is_reply?","T2Server::Interaction::Notification","T2Server/Interaction/Notification.html#method-i-is_reply-3F","()","<p>Is this notification a reply to another notification?\n"],["mkdir","T2Server::Run","T2Server/Run.html#method-i-mkdir","(dir)","<p>Create a directory in the run’s working directory on the server. This could\nbe used to store input data. …\n"],["name","T2Server::Run","T2Server/Run.html#method-i-name","()","<p>Get the name of this run.\n<p>Initially this name is derived by Taverna Server from the name annotation\nin …\n"],["name=","T2Server::Run","T2Server/Run.html#method-i-name-3D","(name)","<p>Set the name of this run. <code>true</code> is returned upon success. The\nmaximum length of names supported by the …\n"],["new","T2Server::AccessForbiddenError","T2Server/AccessForbiddenError.html#method-c-new","(path)","<p>Create a new AccessForbiddenError with the path to the restricted\nattribute.\n"],["new","T2Server::AttributeNotFoundError","T2Server/AttributeNotFoundError.html#method-c-new","(path)","<p>Create a new AttributeNotFoundError with the path to the erroneous\nattribute.\n"],["new","T2Server::AuthorizationError","T2Server/AuthorizationError.html#method-c-new","(credentials)","<p>Create a new AuthorizationError with the rejected username\n"],["new","T2Server::ClientAuthSSLConnectionParameters","T2Server/ClientAuthSSLConnectionParameters.html#method-c-new","(cert, password = nil)","<p><em>certificate</em> should point to a file with the client user's\ncertificate and private key. The key will be ...\n"],["new","T2Server::ConnectionError","T2Server/ConnectionError.html#method-c-new","(cause)","<p>Create a new ConnectionError with the specified cause. The cause to be\npassed in should be the exception …\n"],["new","T2Server::ConnectionParameters","T2Server/ConnectionParameters.html#method-c-new","()","<p>Create a new set of connection parameters with no defaults set.\n"],["new","T2Server::ConnectionRedirectError","T2Server/ConnectionRedirectError.html#method-c-new","(connection)","<p>Create a new ConnectionRedirectError with the new, redirected, connection\nsupplied.\n"],["new","T2Server::CustomCASSLConnectionParameters","T2Server/CustomCASSLConnectionParameters.html#method-c-new","(path)","<p><em>path</em> can either be a directory where the required certificate is\nstored or the path to the certificate ...\n"],["new","T2Server::DefaultConnectionParameters","T2Server/DefaultConnectionParameters.html#method-c-new","()","<p>Create connection parameters that are secure by default and verify the\nserver that is being connected …\n"],["new","T2Server::HttpBasic","T2Server/HttpBasic.html#method-c-new","(username, password)","<p>Create a set of basic credentials using the supplied username and password.\n"],["new","T2Server::InsecureSSLConnectionParameters","T2Server/InsecureSSLConnectionParameters.html#method-c-new","()","<p>Create connection parameters that are insecure by default and do not verify\nthe server that is connected …\n"],["new","T2Server::RunNotFoundError","T2Server/RunNotFoundError.html#method-c-new","(id)","<p>Create a new RunNotFoundError with the specified identifier.\n"],["new","T2Server::RunStateError","T2Server/RunStateError.html#method-c-new","(current, need)","<p>Create a new RunStateError specifying both the current state and that which\nis needed to run the operation. …\n"],["new","T2Server::SSL3ConnectionParameters","T2Server/SSL3ConnectionParameters.html#method-c-new","()","<p>Create connection parameters that specify the use of SSL version 3.\n"],["new","T2Server::Server","T2Server/Server.html#method-c-new","(uri, params = nil)","<p>Create a new Server instance that represents the real server at\n<em>uri</em>. If <em>connection_parameters</em> are supplied …\n"],["new","T2Server::ServerAtCapacityError","T2Server/ServerAtCapacityError.html#method-c-new","()","<p>Create a new ServerAtCapacityError.\n"],["new","T2Server::UnexpectedServerResponse","T2Server/UnexpectedServerResponse.html#method-c-new","(method, path, response)","<p>Create a new UnexpectedServerResponse with details of which HTTP method was\ncalled, the path that it …\n"],["notifications","T2Server::Run","T2Server/Run.html#method-i-notifications","()","<p>Get a list of notifications that are awaiting a response. Returns the empty\nlist if there are none, or …\n"],["output_port","T2Server::Run","T2Server/Run.html#method-i-output_port","(port)","<p>Get output port <em>port</em>.\n"],["output_ports","T2Server::Run","T2Server/Run.html#method-i-output_ports","()","<p>Return a hash (name, port) of all the output ports this run has. Until the\nrun is finished this method …\n"],["owner","T2Server::Run","T2Server/Run.html#method-i-owner","()","<p>Get the username of the owner of this run. The owner is the user who\ncreated the run on the server.\n"],["owner?","T2Server::Run","T2Server/Run.html#method-i-owner-3F","()","<p>Are the credentials being used to access this run those of the owner? The\nowner of the run can give other …\n"],["permission","T2Server::Run","T2Server/Run.html#method-i-permission","(username)","<p>Return the permission granted to the supplied username, if any. Only the\nowner of a run may query its …\n"],["permissions","T2Server::Run","T2Server/Run.html#method-i-permissions","()","<p>Return a hash (username =&gt; permission) of all the permissions set for\nthis run. Only the owner of …\n"],["reference","T2Server::OutputPort","T2Server/OutputPort.html#method-i-reference","()","<p>Get URI references to the data values of this output port as strings.\n<p>For a singleton output a single …\n"],["remote_file=","T2Server::InputPort","T2Server/InputPort.html#method-i-remote_file-3D","(filename)","<p>Set the remote file to use for this port’s data. The file must already be\non the server. This has no …\n"],["remote_file?","T2Server::InputPort","T2Server/InputPort.html#method-i-remote_file-3F","()","<p>Is this port’s data being supplied by a remote (one that is already on the\nserver) file?\n"],["replace_uri_path","T2Server::Util","T2Server/Util.html#method-c-replace_uri_path","(uri, path)","<p>Replace the given URI’s path with a new one. The new path must be an\nabsolute path (start with a slash). …\n"],["request_baclava_output","T2Server::Run","T2Server/Run.html#method-i-request_baclava_output","()","<p>Set the server to save the outputs of this run in baclava format. This must\nbe done before the run is …\n"],["revoke_permission","T2Server::Run","T2Server/Run.html#method-i-revoke_permission","(username)","<p>Revoke whatever permissions that have been granted to the user. Only the\nowner of a run may revoke permissions …\n"],["run","T2Server::Server","T2Server/Server.html#method-i-run","(identifier, credentials = nil)","<p>Return the specified run.\n"],["run_limit","T2Server::Server","T2Server/Server.html#method-i-run_limit","(credentials = nil)","<p>The maximum number of runs that this server will allow at any one time.\nRuns in any state (<code>Initialized</code> …\n"],["running?","T2Server::Run","T2Server/Run.html#method-i-running-3F","()","<p>Is this run in the :running state?\n"],["runs","T2Server::Server","T2Server/Server.html#method-i-runs","(credentials = nil)","<p>Return the set of runs on this server.\n"],["set?","T2Server::InputPort","T2Server/InputPort.html#method-i-set-3F","()","<p>Has this port been set?\n"],["size","T2Server::OutputPort","T2Server/OutputPort.html#method-i-size","()","<p>Get the data size of the data value in this output port.\n<p>For a singleton output a single size is returned. …\n"],["start","T2Server::Run","T2Server/Run.html#method-i-start","()","<p>Start this run on the server. Returns true if the run was started, false\notherwise.\n<p>Raises RunStateError …\n"],["start_time","T2Server::Run","T2Server/Run.html#method-i-start_time","()","<p>Get the start time of this run as an instance of class Time.\n"],["status","T2Server::Run","T2Server/Run.html#method-i-status","()","<p>Get the status of this run. Status can be one of :initialized, :running or\n:finished.\n"],["stderr","T2Server::Run","T2Server/Run.html#method-i-stderr","()","<p>Get anything that the run printed to the standard error stream.\n"],["stdout","T2Server::Run","T2Server/Run.html#method-i-stdout","()","<p>Get anything that the run printed to the standard out stream.\n"],["stream_value","T2Server::OutputPort","T2Server/OutputPort.html#method-i-stream_value","(stream, range = nil)","<p>Stream a singleton port value directly to another stream and return the\nnumber of bytes written. If a …\n"],["stream_value","T2Server::PortValue","T2Server/PortValue.html#method-i-stream_value","(stream, range = 0...@size)","<p>Stream this port value directly into another stream. The stream passed in\nmay be anything that provides …\n"],["strip_path_slashes","T2Server::Util","T2Server/Util.html#method-c-strip_path_slashes","(path)","<p>Returns a new String with one leading and one trailing slash removed from\nthe ends of <em>path</em> (if present). …\n"],["strip_uri_credentials","T2Server::Util","T2Server/Util.html#method-c-strip_uri_credentials","(uri)","<p>Strip user credentials from an address in URI or String format and return a\ntuple of the URI minus the …\n"],["to_s","T2Server::HttpCredentials","T2Server/HttpCredentials.html#method-i-to_s","()","<p>Return a String representation of these credentials. Just the username is\nreturned; the password is kept …\n"],["total_size","T2Server::OutputPort","T2Server/OutputPort.html#method-i-total_size","()","<p>Return the total data size of all the data in this output port.\n"],["trusts","T2Server::Run","T2Server/Run.html#method-i-trusts","()","<p>Return a list of all the URIs of trusts that have been registered for this\nrun. At present there is no …\n"],["type","T2Server::OutputPort","T2Server/OutputPort.html#method-i-type","()","<p>Get the mime type of the data value in this output port.\n<p>For a singleton output a single type is returned. …\n"],["upload_data","T2Server::Run","T2Server/Run.html#method-i-upload_data","(data, remote_name, remote_directory = \"\")","<p>Upload data to the server and store it in <code>remote_file</code>. The\nremote directory to put this file in can also …\n"],["upload_file","T2Server::Run","T2Server/Run.html#method-i-upload_file","(filename, params={})","<p>Upload a file, with name <em>filename</em>, to the server. Possible values\nthat can be passed in via <em>params</em> are: …\n"],["uri","T2Server::Server","T2Server/Server.html#method-i-uri","()","<p>The URI of the connection to the remote Taverna Server.\n"],["value","T2Server::Administrator::AdminResource","T2Server/Administrator/AdminResource.html#method-i-value","()","<p>Get or set the value held by this resource. This call always queries the\nserver as values can change …\n"],["value","T2Server::OutputPort","T2Server/OutputPort.html#method-i-value","(range = nil, &block)","<p>For singleton outputs download or stream the data (or part of it) held by\nthe output port. Please see …\n"],["value","T2Server::PortValue","T2Server/PortValue.html#method-i-value","(range = 0...@size, &block)","<p>Get the value of this port from the server.\n<p>If no parameters are supplied then this method will simply …\n"],["value=","T2Server::InputPort","T2Server/InputPort.html#method-i-value-3D","(value)","<p>Set the value of this input port. This has no effect if the run is already\nrunning or finished.\n"],["version","T2Server::Server","T2Server/Server.html#method-i-version","()","<p>The version string of the remote Taverna Server.\n"],["version_components","T2Server::Server","T2Server/Server.html#method-i-version_components","()","<p>An array of the major, minor and patch version components of the remote\nTaverna Server.\n"],["wait","T2Server::Run","T2Server/Run.html#method-i-wait","(interval = 1)","<p>Wait (block) for this run to finish. How often (in seconds) the run is\ntested for completion can be specified …\n"],["workflow","T2Server::Run","T2Server/Run.html#method-i-workflow","()","<p>Get the workflow that this run represents.\n"],["writable?","T2Server::Administrator::AdminResource","T2Server/Administrator/AdminResource.html#method-i-writable-3F","()","<p>Is this resource writable?\n"],["write_value_to_file","T2Server::OutputPort","T2Server/OutputPort.html#method-i-write_value_to_file","(filename, range = nil)","<p>Stream a singleton port value to a file and return the number of bytes\nwritten. If a range is supplied …\n"],["write_value_to_file","T2Server::PortValue","T2Server/PortValue.html#method-i-write_value_to_file","(filename, range = 0...@size)","<p>Stream this port value directly to a file. If a range is supplied then just\nthat range of data is downloaded …\n"],["zip","T2Server::OutputPort","T2Server/OutputPort.html#method-i-zip","(param = nil, &block)","<p>Get the data in this output port directly from the server in zip format.\n<p>This method does not work with …\n"],["zip_output","T2Server::Run","T2Server/Run.html#method-i-zip_output","(param = nil, port = \"\", &block)","<p>Get the working directory of this run directly from the server in zip\nformat.\n<p>Calling this method with …\n"],["CHANGES","","CHANGES_rdoc.html","","<p>Changes log for the T2 Ruby Gem\n<p>Version 0.9.3\n<p>Correctly handle missing values in output ports.\n"],["LICENCE","","LICENCE_rdoc.html","","<p>Copyright © 2010-2013 The University of Manchester, UK.\n<p>All rights reserved.\n<p>Redistribution and use in …\n"],["README","","README_rdoc.html","","<p>Taverna 2 Server Interaction Gem\n<p>Authors &mdash; Robert Haines\n<p>Contact &mdash; support@mygrid.org.uk\n"]]}}