#!/usr/bin/env ruby
# Copyright (c) 2010, 2011 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the names of The University of Manchester nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Robert Haines

require 'rubygems'
require 't2-server'
require 'optparse'

# set up options
inputs  = {}
files = {}
wkf_file = ""
expiry = ""
output_refs = false
baclava_out = nil
delete_run = false
no_wait = false
opts = OptionParser.new do |opt|
  opt.banner = "Usage: t2-run-workflow [options] server-address"
  opt.separator ""
  opt.separator "  Where server-address is the full URI of the server to"
  opt.separator "  connect to, e.g.: http://example.com:8080/taverna"
  opt.separator "  and [options] can be:"
  opt.on("-w WORKFLOW", "--workflow=WORKFLOW", "The workflow to run. If this is not " +
    "specified then the workflow is read from standard input") do |val|
    wkf_file = val
  end
  opt.on("-i INPUT:VALUE", "--input=INPUT:VALUE", "Set input port INPUT to VALUE") do |val|
    input, value = val.chomp.split(':', 2)
    inputs[input] = value
  end
  opt.on("-f INPUT:FILE", "--input-file=INPUT:FILE",
    "Set input port INPUT to use the contents of FILE as its input") do |val|
      input, filename = val.chomp.split(':', 2)
      files[input] = filename
  end
  opt.on("-e EXPIRY", "--expiry=EXPIRY", "Set the expiry  date/time of this run") do |val|
    expiry = val.chomp
  end
  opt.on("-b BACLAVA", "--baclava-in=BACLAVA", "Set baclava file for input port values") do |val|
    inputs[:baclava] = val
  end
  opt.on("-o", "--baclava-out=BACLAVA", "Return outputs in baclava format." +
    " A filename may be specified or 'out.xml' is used") do |val|
      baclava_out = val
  end
  opt.on("-n", "--no-wait", "Do not wait for workflow to finish, return " +
    "once it has started running") do |val|
      no_wait = true
  end
  opt.on("-r", "--output-refs", "Return URIs that point to the data items " +
    "of the output rather than the data items themselves.") do |val|
    output_refs = val
  end
  opt.on("-D", "--delete", "Delete the run from the server when it is " +
    "complete. By default the run and its results are preserved. Note that " +
    "the run will still be deleted when its expiry time is reached") do |val|
    delete_run = val    
  end
  opt.on_tail("-h", "-?", "--help", "Show this message") do
    puts opt
    exit
  end
  opt.on_tail("-v", "--version", "Show the version") do
    puts "Taverna 2 Server Ruby Gem version: #{T2Server::GEM_VERSION}"
    exit
  end
end

# parse options
opts.parse!

# read and check server address
uri = ARGV.shift
if uri == nil
  puts opts
  exit 1
end

uri, creds = URI.strip_credentials(uri)

# read workflow
if wkf_file == ""
  wkf = ARGF.read
else
  wkf = IO.read(wkf_file)
end

begin
  T2Server::Run.create(uri, wkf, creds) do |run|
    puts "Created run with uuid: #{run.uuid}"
    puts "Created at #{run.create_time}"

    # set run expiry
    if expiry != ""
      run.expiry=(expiry)
      puts "Expiry time set to #{run.expiry}"
    end

    # set inputs
    if inputs.has_key?(:baclava)
      run.upload_baclava_file(inputs[:baclava])
      puts "Uploaded baclava input file"
    else
      inputs.each do |input, value|
        puts "Set input '#{input}' to #{value}"
        run.set_input(input, value)
      end
  
      files.each do |input, file|
        name = file.split("/")[-1];
        puts "Set input '#{input}' to use file '#{name}'"
        run.upload_input_file(input, file)
      end
    end

    # output baclava?
    run.request_baclava_output unless baclava_out == nil

    # start run and wait until it is finished
    run.start
    puts "Started at #{run.start_time}"

    # bail out if user doesn't want to wait
    exit 0 if no_wait

    # otherwise wait
    print "Running"
    run.wait(:progress => true)
    puts "Finished at #{run.finish_time}"

    # get outputs
    stdout = run.stdout
    stderr = run.stderr
    exitcd = run.exitcode
    puts "Exitcode: #{exitcd}"
    if stdout != "" then puts "Stdout:\n#{stdout}" end
    if stderr != "" then puts "Stderr:\n#{stderr}" end

    if exitcd == 0
      if baclava_out != nil
        File.open(baclava_out, "w") do |file|
          file.syswrite(run.baclava_output)
        end
        puts "Baclava file written to '#{baclava_out}'"
      else
        # go through the outputs and print them out
        puts "Outputs:"
        run.get_output_ports.each do |o|
          print "          #{o} -> "
          p run.get_output("#{o}", output_refs)
        end
      end
    end

    # delete run?
    if delete_run
      run.delete
      puts "Run deleted"
    end
  end
rescue T2Server::T2ServerError => e
  puts e
  exit 1
end
