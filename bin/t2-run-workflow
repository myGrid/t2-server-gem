#!/usr/bin/env ruby
# Copyright (c) 2010-2013 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the names of The University of Manchester nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Robert Haines

require 'rubygems'
require 't2-server-cli'

include T2Server::CLI

# set up options
inputs  = {}
files = {}
options = {:screds => [], :interactions => :show}
conn_params, creds = register_options("Usage: t2-run-workflow [options] "\
    "server-address") do |opt|
  opt.separator "  Where server-address is the full URI of the server to"
  opt.separator "  connect to, e.g.: http://example.com:8080/taverna"
  opt.separator "  and [options] can be:"
  opt.on("-w WORKFLOW", "--workflow=WORKFLOW", "The workflow to run. If "\
    "this is not specified then the workflow is read from standard "\
    "input") do |val|
      options[:wkf_file] = val.chomp
  end
  opt.on("-i INPUT:VALUE", "--input=INPUT:VALUE", "Set input port INPUT to "\
    "VALUE") do |val|
      input, value = val.chomp.split(':', 2)
      inputs[input] = value
  end
  opt.on("-f INPUT:FILE", "--input-file=INPUT:FILE",
    "Set input port INPUT to use the contents of FILE as its input") do |val|
      input, filename = val.chomp.split(':', 2)
      files[input] = filename
  end
  opt.on("-I LEVEL", "--interactions=LEVEL", "Show, open or ignore any "\
    "workflow interactions. LEVEL can be 'show' (the default), which simply "\
    "lists the interaction URI in the terminal; 'open', which will open the "\
    "interaction in a Web browser; or 'none', which will not check for "\
    "interactions from the workflow at all. This should only be set to "\
    "'none' if you are sure the workflow has no interactions or if you will "\
    "be handling them in some other way.") do |val|
      levels = [:show, :open, :none]
      level = val.downcase.to_sym
      options[:interactions] = levels.include?(level) ? level : :show
  end
  opt.on("-e EXPIRY", "--expiry=EXPIRY", "Set the expiry date/time of this "\
    "run") do |val|
      options[:expiry] = Time.parse(val.chomp)
  end
  opt.on("-N NAME", "--name=NAME", "Give this run a name. Supported in "\
    "Taverna Server versions 2.5.0 and up") do |val|
      options[:name] = val.chomp
  end
  opt.on("-c URI::USER:PASS", "--credential=URI::USER:PASS",
    "Provide a credential for a secure remote service. NOTE :: between URI "\
    "and credential") do |val|
      uri, cred = val.chomp.split('::', 2)
      user, pass = cred.chomp.split(':', 2)
      options[:screds] << [uri, user, pass]
  end
  opt.on("-b BACLAVA", "--baclava-in=BACLAVA", "Set baclava file for input "\
    "port values") do |val|
      inputs[:baclava] = val
  end
  opt.on("-o", "--baclava-out=BACLAVA", "Return outputs in baclava format."\
    " A filename may be specified or 'out.xml' is used") do |val|
      options[:baclava_out] = val.chomp
  end
  opt.on("-n", "--no-wait", "Do not wait for workflow to finish, return "\
    "once it has started running") do |val|
      options[:no_wait] = true
  end
  opt.on("-r", "--output-refs", "Return URIs that point to the data items "\
    "of the output rather than the data items themselves.") do |val|
      options[:output_refs] = val
  end
  opt.on("-D", "--delete", "Delete the run from the server when it is "\
    "complete. By default the run and its results are preserved. Note that "\
    "the run will still be deleted when its expiry time is reached") do |val|
      options[:delete] = val
  end
  opt.on("-z", "--zip=FILE", "Get the entire working directory of the run "\
    "in zip format and save it to the provided filename.") do |val|
      options[:zip_out] = val.chomp
  end
  opt.on("-x", "--exitcode", "Return the exitcode of the run.") do
    options[:exitcode] = true
  end
  opt.on("--stderr", 'Return the "standard error" output of the run.') do
    options[:stderr] = true
  end
  opt.on("--stdout", 'Return the "standard out" output of the run.') do
    options[:stdout] = true
  end
end

if options[:interactions] == :open
  begin
    require 'launchy'
  rescue LoadError
    puts "\n****\nTo support opening interactions in your Web browser the "\
      "launchy gem must be installed:\n\n$ gem install launchy\n\n"\
      "Interaction URIs will be listed here instead. Please copy and paste "\
      "them into your Web browser to display them.\n****\n\n"
    options[:interactions] = :show
  end
end

# read and check server address
uri, creds = parse_address(ARGV.shift, creds)

# read workflow and ensure that it is not empty
if options[:wkf_file]
  wkf = IO.read(options[:wkf_file])
else
  wkf = ARGF.read
end
exit 1 if wkf == ""

begin
  T2Server::Run.create(uri, wkf, creds, conn_params) do |run|
    puts "Created run with identifier: #{run.identifier}"
    puts "Created at #{run.create_time}"

    # set run name
    if options[:name]
      run.name = options[:name]
      puts "Run name set to '#{run.name}'"
    end

    # set run expiry
    if options[:expiry]
      run.expiry=(options[:expiry])
      puts "Expiry time set to #{run.expiry}"
    end

    # set inputs
    in_ports = run.input_ports
    if inputs.has_key?(:baclava)
      run.baclava_input = inputs[:baclava]
      puts "Uploaded baclava input file"
    else
      in_ports.each_value do |port|
        input = port.name
        if inputs.include? input
          port.value = inputs[input]
          puts "Input '#{input}' set to #{port.value}"
        elsif files.include? input
          port.file = files[input]
          puts "Input '#{input}' set to use file '#{port.file}'"
        else
          puts "Input '#{input}' has not been set."
          run.delete
          exit 1
        end
      end
    end

    # set remote service credentials
    options[:screds].each do |list|
      run.add_password_credential(list[0], list[1], list[2])
    end

    # output baclava?
    run.request_baclava_output if options[:baclava_out]

    # try to start run
    unless run.start
      puts "Run could not be started because the server is already running "\
        "its configured maximum number of runs. Please try again later."
      run.delete
      exit 1
    end
    puts "Started at #{run.start_time}"

    # bail out if user doesn't want to wait
    exit 0 if options[:no_wait]

    # otherwise wait, but list or open notifications if there are any
    print "Running."
    until run.finished?
      sleep(1)
      unless options[:interactions] == :none
        run.notifications(:new_requests).each do |note|
          if options[:interactions] == :open
            Launchy.open note.uri
          else
            puts "\n#{note.uri}\n"
          end
        end
      end
      print "."
      $stdout.flush
    end
    puts "\nFinished at #{run.finish_time}"

    # get outputs
    exitcd = run.exitcode
    puts "Exitcode: #{exitcd}" if options[:exitcode] || exitcd != 0
    puts "Stdout:\n#{run.stdout}" if options[:stdout]
    puts "Stderr:\n#{run.stderr}" if options[:stderr]

    if exitcd == 0
      if options[:baclava_out]
        run.baclava_output(options[:baclava_out])
        puts "Baclava file written to '#{options[:baclava_out]}'"
      elsif options[:zip_out]
        run.zip_output(options[:zip_out])
        puts "Zip file written to '#{options[:zip_out]}'"
      else
        # go through the outputs and print them out
        outputs = run.output_ports
        unless outputs.empty?
          puts "Outputs:"
          outputs.each_value do |port|
            print "    #{port.name} (#{port.depth}) -> "
            if options[:output_refs]
              p port.reference
            else
              p port.value
            end
          end
        end
      end
    end

    # delete run?
    if options[:delete]
      run.delete
      puts "Run deleted"
    end
  end
rescue RuntimeError => e
  puts e
  exit 1
end
